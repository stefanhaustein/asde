const G = 6.67428e-11
const TIMESCALE = 525600
const SCALE = 0.5e-9

const bodies = [newBody(1.99e30, 0, 0, "🟡", 12), newBody( 3.3e23, 58e9, 47.36e3, "🌕", 3), newBody( 4.87e24, 108e9, 35e3, "🟤", 6), newBody( 5.97e24, 150e9, 29.8e3, "🌍", 6)]

class Body:
 var mass = 0
 var x = 0
 var y = 0
 var vx = 0
 var vy = 0
 var fx = 0
 var fy = 0
 var sprite = screen.newSprite()

 def addAttraction(self: Body, other: Body):
  var dx = other.x - self.x
  var dy = other.y - self.y
  var r2 = dx * dx + dy * dy
  var f = G * mass * other.mass / r2
  var th = atan2(dy, dx)
  self.fx = self.fx + f * cos(th)
  self.fy = self.fy + f * sin(th)
 end

 def update(self: Body, dt: float):
  self.vx = self.vx + dt * self.fx / self.mass
  self.vy = self.vy + dt * self.fy / self.mass
  self.x = self.x + self.vx * dt
  self.y = self.y + self.vy * dt
  self.sprite.x = self.x * SCALE
  self.sprite.y = self.y * SCALE
  self.fx = 0
  self.fy = 0
 end
end

def newBody(mass: float, distance: float, velocity: float, face: str, size: float) -> Body:
 var planet = Body{}
 planet.mass = mass
 planet.x = distance
 planet.vy = velocity
 planet.sprite.size = size
 planet.sprite.face = face
 return planet
end

def main():
 while true:
  for i in bodies:
   for j in bodies:
     if i != j:
       i.addAttraction(j)
     end
   end
   i.update(TIMESCALE/60)
  end
  sleep 16
 end
end
